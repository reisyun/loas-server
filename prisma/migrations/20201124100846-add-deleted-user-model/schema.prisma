datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  profile     Profile?
  reviews     Review[]
  collections MediaCollection[]

  @@map(name: "user")
}

model DeletedUser {
  id        String   @id
  email     String
  removedAt DateTime @default(now())

  profile     Profile?
  collections MediaCollection[]

  @@map(name: "user_deleted")
}

enum Gender {
  SECRET
  MALE
  FEMALE
}

enum Language {
  KOREAN
  ENGLISH
  JAPANESE
}

model Profile {
  id       Int      @id @default(autoincrement())
  shortBio String?
  avatar   String?
  gender   Gender   @default(SECRET)
  language Language @default(ENGLISH)

  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  deletedUser DeletedUser? @relation(fields: [userId], references: [id])

  @@map(name: "profile")
}

model Review {
  id        String   @id @default(uuid())
  content   String
  spoiler   Boolean  @default(true)
  private   Boolean  @default(false)
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId Int    @unique

  @@map(name: "review")
}

model MediaCollection {
  id          String    @id @default(uuid())
  name        String
  description String?
  isCustom    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  removedAt   DateTime?

  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  deletedUser DeletedUser? @relation(fields: [userId], references: [id])
  mediaList   MediaItem[]

  @@map(name: "media_collection")
}

enum MediaItemStatus {
  CURRENT
  PLANNING
  COMPLETED
}

model MediaItem {
  id          Int             @id @default(autoincrement())
  status      MediaItemStatus @default(PLANNING)
  like        Boolean?
  private     Boolean         @default(false)
  repeat      Int             @default(0)
  completedAt DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  collection   MediaCollection @relation(fields: [collectionId], references: [id])
  collectionId String
  media        Media           @relation(fields: [mediaId], references: [id])
  mediaId      Int             @unique

  @@map(name: "media_item")
}

enum Format {
  TVA
  OVA
  ONA
  MOVIE
  MUSIC
  SPECIAL
}

enum MediaStatus {
  RELEASING
  FINISHED
  UNRELEASED
  CANCELLED
}

model Media {
  id           Int          @id @default(autoincrement())
  title        String
  image        String?
  likeCount    Int          @default(0)
  dislikeCount Int          @default(0)
  synopsis     String?
  studio       String?
  format       Format?
  startDate    DateTime?
  endDate      DateTime?
  episodeCount Int?
  status       MediaStatus?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  removedAt    DateTime?

  genres    Genre[]     @relation(references: [id])
  reviews   Review[]
  mediaList MediaItem[]

  @@index([title, studio])
  @@map(name: "media")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String

  media Media[] @relation(references: [id])

  @@map(name: "genre")
}
