datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// User

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  verified  Boolean   @default(false)
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  removedAt DateTime?

  profile                Profile?
  histories              History[]
  collections            Collection[]
  collectionLikeDisLikes CollectionLikeDisLike[]
  mediaLikeDisLikes      MediaLikeDisLike[]
  reviews                Review[]

  @@map(name: "user")
}

enum Gender {
  SECRET
  MALE
  FEMALE
}

enum Language {
  KOREAN
  ENGLISH
  JAPANESE
}

model Profile {
  id       Int      @id @default(autoincrement())
  shortBio String?
  avatar   String?
  gender   Gender   @default(SECRET)
  language Language @default(ENGLISH)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map(name: "profile")
}

// Review

model Review {
  id        String   @id @default(uuid())
  body      String
  spoiler   Boolean  @default(true)
  private   Boolean  @default(false)
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String

  @@map(name: "review")
}

// History

enum HistoryCategory {
  PLANNING
  CURRENT
  COMPLETED
}

model History {
  id        String          @id @default(uuid())
  category  HistoryCategory
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  removedAt DateTime?

  collector    User          @relation(fields: [collectorId], references: [id])
  collectorId  String
  historyItems HistoryItem[]

  @@map(name: "history")
}

model HistoryItem {
  id          String   @id @default(uuid())
  repeat      Int      @default(0)
  private     Boolean  @default(false)
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  history   History @relation(fields: [historyId], references: [id])
  historyId String
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String

  @@map(name: "history_item")
}

// Collection

model Collection {
  id          String    @id @default(uuid())
  name        String
  description String?
  private     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  removedAt   DateTime?

  collector              User                    @relation(fields: [collectorId], references: [id])
  collectorId            String
  collectionLikeDisLikes CollectionLikeDisLike[]
  collectionItems        CollectionItem[]

  @@map(name: "collection")
}

model CollectionLikeDisLike {
  id     Int     @id @default(autoincrement())
  isLike Boolean

  collector    User       @relation(fields: [collectorId], references: [id])
  collectorId  String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@map(name: "collection_like_dislike")
}

model CollectionItem {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  media        Media      @relation(fields: [mediaId], references: [id])
  mediaId      String     @id

  @@map(name: "collection_item")
}

// Media

enum MediaFormat {
  TVA
  OVA
  ONA
  MOVIE
  MUSIC
  SPECIAL
}

enum MediaStatus {
  RELEASING
  FINISHED
  UNRELEASED
  CANCELLED
}

model Media {
  id           String       @id @default(uuid())
  no           Int          @unique @default(autoincrement())
  title        String
  image        String?
  synopsis     String?
  studio       String?
  format       MediaFormat?
  status       MediaStatus?
  startDate    DateTime?
  endDate      DateTime?
  episodeCount Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  removedAt    DateTime?

  mediaLikeDisLikes MediaLikeDisLike[]
  genres            Genre[]            @relation(references: [id])
  reviews           Review[]
  historyItems      HistoryItem[]
  collectionItems   CollectionItem[]

  @@index([no, title, studio])
  @@map(name: "media")
}

model MediaLikeDisLike {
  id     Int     @id @default(autoincrement())
  isLike Boolean

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String

  @@map(name: "media_like_dislike")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String

  media Media[] @relation(references: [id])

  @@map(name: "genre")
}
