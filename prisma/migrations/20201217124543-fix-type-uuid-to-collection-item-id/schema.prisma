datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   Int
  reviews     Review[]
  collections Collection[]

  @@map(name: "user")
}

// 비활성화 여부를 확인해 복구 요청을 판단
model DeletedUser {
  id        String   @id
  email     String?
  disabled  Boolean
  deletedAt DateTime @default(now())

  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   Int
  collections Collection[]

  @@map(name: "user_deleted")
}

enum Gender {
  SECRET
  MALE
  FEMALE
}

enum Language {
  KOREAN
  ENGLISH
  JAPANESE
}

model Profile {
  id       Int      @id @default(autoincrement())
  shortBio String?
  avatar   String?
  gender   Gender   @default(SECRET)
  language Language @default(ENGLISH)

  user        User?
  DeletedUser DeletedUser?

  @@map(name: "profile")
}

model Review {
  id        String   @id @default(uuid())
  body      String
  spoiler   Boolean  @default(true)
  private   Boolean  @default(false)
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId Int    @unique

  @@map(name: "review")
}

enum CollectionCategory {
  CURRENT
  PLANNING
  COMPLETED
  CUSTOM
}

model Collection {
  id          String             @id @default(uuid())
  name        String
  description String?
  category    CollectionCategory @default(CUSTOM)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  removedAt   DateTime?

  collector          User?            @relation(fields: [collectorId], references: [id])
  collectorId        String?
  deletedCollector   DeletedUser?     @relation(fields: [deletedCollectorId], references: [id])
  deletedCollectorId String?
  collectionItems    CollectionItem[]

  @@map(name: "collection")
}

model CollectionItem {
  id          String   @id @default(uuid())
  like        Boolean?
  private     Boolean  @default(false)
  repeat      Int      @default(0)
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  media        Media      @relation(fields: [mediaId], references: [id])
  mediaId      Int

  @@map(name: "collection_item")
}

enum MediaFormat {
  TVA
  OVA
  ONA
  MOVIE
  MUSIC
  SPECIAL
}

enum MediaStatus {
  RELEASING
  FINISHED
  UNRELEASED
  CANCELLED
}

model Media {
  id           Int          @id @default(autoincrement())
  title        String
  image        String?
  likeCount    Int          @default(0)
  dislikeCount Int          @default(0)
  synopsis     String?
  studio       String?
  format       MediaFormat?
  status       MediaStatus?
  startDate    DateTime?
  endDate      DateTime?
  episodeCount Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  removedAt    DateTime?

  genres          Genre[]          @relation(references: [id])
  reviews         Review[]
  collectionItems CollectionItem[]

  @@index([title, studio])
  @@map(name: "media")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String

  media Media[] @relation(references: [id])

  @@map(name: "genre")
}
