datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  verified  Boolean   @default(false)
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  removedAt DateTime?

  profile   Profile?
  libraries Library[]
  reviews   Review[]

  @@map(name: "user")
}

enum Gender {
  SECRET
  MALE
  FEMALE
}

enum Language {
  KOREAN
  ENGLISH
  JAPANESE
}

model Profile {
  id       Int      @id @default(autoincrement())
  shortBio String?
  avatar   String?
  gender   Gender   @default(SECRET)
  language Language @default(ENGLISH)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map(name: "profile")
}

model Library {
  id          String    @id @default(uuid())
  name        String
  description String?
  private     Boolean   @default(false)
  isCustom    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  removedAt   DateTime?

  user    User     @relation(fields: [userId], references: [id])
  userId  String
  records Record[]

  @@map(name: "library")
}

enum RecordStatus {
  CURRENT
  PLANNING
  COMPLETED
}

model Record {
  status      RecordStatus @default(PLANNING)
  like        Boolean?
  completedAt DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  library   Library @relation(fields: [libraryId], references: [id])
  libraryId String
  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   Int     @id

  @@map(name: "record")
}

// Record 추가 없이 Review 쓰기 가능
model Review {
  id        String   @id @default(uuid())
  content   String
  spoiler   Boolean  @default(true)
  private   Boolean
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId Int

  @@map(name: "review")
}

enum Format {
  TVA
  OVA
  ONA
  MOVIE
  MUSIC
  SPECIAL
}

enum MediaStatus {
  RELEASING
  FINISHED
  UNRELEASED
  CANCELLED
}

model Media {
  id           Int          @id @default(autoincrement())
  title        String
  image        String?
  likeCount    Int          @default(0)
  dislikeCount Int          @default(0)
  synopsis     String?
  studio       String?
  format       Format?
  startDate    DateTime?
  endDate      DateTime?
  episodeCount Int?
  status       MediaStatus?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  genres  Genre[]  @relation(references: [id])
  records Record[]
  reviews Review[]

  @@index([title, studio])
  @@map(name: "media")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String

  media Media[] @relation(references: [id])

  @@map(name: "genre")
}
